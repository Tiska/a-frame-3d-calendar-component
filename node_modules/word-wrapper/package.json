{
  "_args": [
    [
      {
        "raw": "word-wrapper@^1.0.7",
        "scope": null,
        "escapedName": "word-wrapper",
        "name": "word-wrapper",
        "rawSpec": "^1.0.7",
        "spec": ">=1.0.7 <2.0.0",
        "type": "range"
      },
      "/Users/abody/Workspace/VSCT/aframe-a-frame-3D-calendar-component/node_modules/layout-bmfont-text"
    ]
  ],
  "_from": "word-wrapper@>=1.0.7 <2.0.0",
  "_id": "word-wrapper@1.0.7",
  "_inCache": true,
  "_location": "/word-wrapper",
  "_nodeVersion": "0.10.32",
  "_npmUser": {
    "name": "mattdesl",
    "email": "dave.des@gmail.com"
  },
  "_npmVersion": "2.1.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "word-wrapper@^1.0.7",
    "scope": null,
    "escapedName": "word-wrapper",
    "name": "word-wrapper",
    "rawSpec": "^1.0.7",
    "spec": ">=1.0.7 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/layout-bmfont-text"
  ],
  "_resolved": "https://registry.npmjs.org/word-wrapper/-/word-wrapper-1.0.7.tgz",
  "_shasum": "1f14afebf66dfdf0fef55efd37184efbd08c28b6",
  "_shrinkwrap": null,
  "_spec": "word-wrapper@^1.0.7",
  "_where": "/Users/abody/Workspace/VSCT/aframe-a-frame-3D-calendar-component/node_modules/layout-bmfont-text",
  "author": {
    "name": "Matt DesLauriers",
    "email": "dave.des@gmail.com",
    "url": "https://github.com/mattdesl"
  },
  "bugs": {
    "url": "https://github.com/mattdesl/word-wrapper/issues"
  },
  "dependencies": {},
  "description": "wraps words based on arbitrary 2D glyphs",
  "devDependencies": {
    "2d-context": "^1.1.0",
    "6to5ify": "^3.1.2",
    "beefy": "^2.1.1",
    "browserify": "^8.1.0",
    "domready": "^1.0.7",
    "tap-spec": "^2.1.2",
    "tape": "^3.0.3"
  },
  "directories": {},
  "dist": {
    "shasum": "1f14afebf66dfdf0fef55efd37184efbd08c28b6",
    "tarball": "https://registry.npmjs.org/word-wrapper/-/word-wrapper-1.0.7.tgz"
  },
  "gitHead": "04637065d57a8690d98a870fd3b69a89f63d6e0e",
  "homepage": "https://github.com/mattdesl/word-wrapper",
  "keywords": [
    "glyph",
    "word",
    "wrap",
    "wordwrap",
    "pre",
    "string",
    "text",
    "font",
    "rendering",
    "canvas",
    "2d",
    "text"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mattdesl",
      "email": "dave.des@gmail.com"
    }
  ],
  "name": "word-wrapper",
  "optionalDependencies": {},
  "readme": "# word-wrapper\n\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\n![img](http://i.imgur.com/LqQyHSg.png)\n\n<sup>click [here](http://mattdesl.github.io/word-wrapper/demo/) for a Canvas demo</sup>\n\nThis is a generic word wrapper for left-to-right text in 2D applications. It can be used in console, canvas, WebGL, etc. Accepts a custom `measure` function for glyph metrics. \n\nThe simplest use-case:\n\n```js\nvar text = wrap('the quick brown fox jumps over the lazy dog', { width: 8 })\nconsole.log(text)\n``` \n\nThis will print the following:\n\n```\nthe\nquick\nbrown\nfox\njumps\nover the\nlazy dog\n```\n\nIn 2D applications it's more common to layout the text manually. For this we can use `wrap.lines()` to operate on a list of `{ start, end }` indices. Then each line can be rendered with `text.substring(line.start, line.end)`. An example:\n\n```js\n//for example...\nvar lines = wrap.lines(text, { width: 40 })\n\n//operate on the lines...\nvar text = lines\n        .map( x => text.substring(x.start, x.end) )\n        .join('\\n')\n```\n\nSee [demo/canvas](demo/canvas.js) for a full 2D example.\n\n## Usage\n\n[![NPM](https://nodei.co/npm/word-wrapper.png)](https://www.npmjs.com/package/word-wrapper)\n\n#### `text = wordwrap(text[, opt])`\n\nWord-wraps the `text` string with the given options. Returns a string with the word-wrapped result.\n\n- `start` the starting index to word-wrap, default 0\n- `end` the ending index to word-wrap (exclusive), default `text.length`\n- `width` the width to word wrap to, in 'units' (see below)\n- `measure` a function that measures the number of glyphs that can fit in (see [measure](#measure)). Defaults to monospace (i.e. 1 char is 1 unit)\n- `mode` can be 'pre' (maintain spacing), or 'nowrap' (collapse whitespace but only break on newline characters), otherwise assumes normal word-wrap behaviour\n\nThe `width` is measured in 'units' which could be pixels, centimeters, characters, etc. By default, one \"unit\" corresponds to one character (i.e. for monospace console rendering). To wrap text to a pixel width, you should use a custom [measure](#measure) function.\n\nIf mode is `\"pre\"` and `width` is specified, it will clip the characters to the given width (to avoid them over-flowing outside the bounds). \n\n#### `lines = wordwrap.lines(text[, opt])`\n\nTakes the same parameters as the above method, but returns a list of \"lines\" objects for manual text layout/rendering. A \"line\" is typically an object with `{ start, end }` indices that can be used with `text.substring(start, end)`. The \"line\" is the return value from the `measure` function, so it may also include application-specific data (i.e. to avoid re-computing line widths).\n\n## measure\n\nTo layout glyphs in 2D space, you typically will need to measure the width of each glyph (and its x-advance, kerning, etc) to determine the maximum number of glyphs that can fit within a specified *available width*. \n\nYou can pass a custom `measure` function which takes the text being wrapped, the `start` (inclusive) and `end` (exclusive) indices into the string, and the desired `width`. The return value should be an object with `{ start, end }` indices, representing the actual glyphs that can be rendered within those bounds. \n\nFor example, a Canvas2D implementation that uses monospace fonts might look like this:\n\n```js\n//the canvas font style\nvar font = '24px \"Courier New\", monospace'\n\n//compute width\nvar measure = createMetrics(context, font)\n\nfunction createMetrics(context, font) {\n    context.font = font\n    var charWidth = context.measureText('M').width\n\n    return function measure(text, start, end, width) {\n        //measures the chunk of text, returning the substring\n        //we can fit within the given width\n        var availableGlyphs = Math.floor(width/charWidth)\n        var totalGlyphs = Math.floor((end-start)*charWidth)\n        var glyphs = Math.min(end-start, availableGlyphs, totalGlyphs)\n        return {\n            start: start,\n            end: start+glyphs\n        }\n    }\n}\n\nfunction draw(context) {\n    var lines = wordwrap(text, { measure: measure, width: 200 })\n\n    //draw the lines.. \n}\n```\n\n## License\n\nThe original implementation is based on [LibGDX's word wrapper](http://libgdx.badlogicgames.com/).\n\nMIT, see [LICENSE.md](http://github.com/mattdesl/word-wrapper/blob/master/LICENSE.md) for details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mattdesl/word-wrapper.git"
  },
  "scripts": {
    "build": "browserify demo/canvas.js -t 6to5ify > demo/bundle.js",
    "canvas": "beefy demo/canvas.js -- -t 6to5ify",
    "test": "node test.js | tap-spec"
  },
  "version": "1.0.7"
}
